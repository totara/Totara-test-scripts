#!/usr/bin/env php
<?php

/**
 * Script to reset the database, install a specific starting database
 * then upgrade it to the current moodle/totara
 * based on the current working directory when called
 */

require_once(dirname(__DIR__).'/utils/utilslib.php');
$scriptname = basename(__FILE__);

// look for command line flags
$opts = getopt('d::n::', array('database::','name::'));

// figure out which database to use
if (isset($opts['database'])) {
    $dbtype = $opts['database'];
} else if (isset($opts['d'])) {
    $dbtype = $opts['d'];
} else {
    // default to postgres
    $dbtype = 'pgsql';
}

// see if a named startdb is given
if (isset($opts['name'])) {
    $startdbname = $opts['name'];
} else if (isset($opts['n'])) {
    $startdbname = $opts['n'];
} else {
    // no named startdb given
    $startdbname = false;
}

$cwd = getcwd();
try {
    $dirroot = get_web_root($cwd);
} catch (Exception $e) {
    echo "Unable to determine webroot for current location '{$cwd}'.\n";
    exit;
}

if (!is_writeable($dirroot)) {
    echo "Webroot '{$dirroot}' is not writeable. Exiting\n";
    exit;
}

$configfile = $dirroot . '/config.php';
if (file_exists($configfile) && !is_writeable($configfile)) {
    echo "Config file '{$configfile}' is not writeable. Exiting\n";
    exit;
}

$instance = basename($dirroot);
$settings = get_instance_settings($instance);
$dataroot = $settings->dataroot;

if (!is_writeable($dataroot)) {
    echo "Site dataroot '{$dataroot}' is not writeable. Exiting\n";
    exit;
}

$dbname = 'fresh' . $instance;

echo "Locating suitable starting database\n";

$backupdir = get_backup_directory();
$dbbackupdir = $backupdir . '/dbs';
$databackupdir = $backupdir . '/data';

if (!is_readable($dbbackupdir)) {
    echo "Could not access DB backup directory path '{$dbbackupdir}'. Exiting.\n";
    exit;
}

if (!is_readable($databackupdir)) {
    echo "Could not access data backup directory path '{$databackupdir}'. Exiting.\n";
    exit;
}

if ($startdbname) {
    // Named startdb given use that.
    $name = $startdbname;
} else {
    // Calculate best startdb based on current code version
    $versioninfo = get_site_version($dirroot);
    $version = isset($versioninfo->totara->version) ?
        $versioninfo->totara->version : $versioninfo->moodle->version;
    $name = get_best_startdb($version, $dbtype);

    if ($name === false) {
        echo "Could not locate a suitable startdb. Create one first with 'savedb startdb' or 'savedb startdb[versionnumber]'. Exiting\n";
        exit;
    }
}

$dbfilename = $dbbackupdir . '/' . $name . '.' . $dbtype;

if (!is_readable($dbfilename)) {
    echo "Could not access DB backup file '{$dbfilename}'. Exiting.\n";
    exit;
}

$datafilename = $databackupdir . '/' . $name . '.zip';

if (!is_readable($datafilename)) {
    echo "Could not access data file '{$datafilename}'. Exiting.\n";
    exit;
}

// Remove old config
if (file_exists($configfile)) {
    echo "Removing old config.php\n";
    unlink($configfile);
}

echo "Dropping any existing {$dbtype} database called '{$dbname}'\n";
// drop and recreate database
$db = mydb::connect($dbtype, $settings->dbhost, $settings->dbuser, $settings->dbpass);
$db->dropdb($dbname);
echo "Creating new {$dbtype} database '{$dbname}'\n";
$db->createdb($dbname);

// empty moodledata folder
echo "Emptying dataroot '{$dataroot}'\n";
delete_directory_contents($dataroot);

echo "Restoring backup from '{$dbfilename}' to {$dbtype} database '{$dbname}'.\n";
$db = mydb::connect($dbtype, $settings->dbhost, $settings->dbuser, $settings->dbpass);

if (!$db->restoredb($dbname, $dbfilename)) {
    echo "Error, file '{$dbfilename}' could not be restored to {$dbtype} database called '{$dbname}'. Exiting.\n";
    exit;
}

echo "Restoring moodledata from '{$datafilename}' to {$dataroot}\n";

// To be safe, let's just unzip on top of existing data.
// We may need to clear out data if this causes problems, but be careful
// with escaping if that is the case!
$command = "cd {$dataroot} && unzip -u {$datafilename} && cd -";
exec($command, $output, $returncode);

// 0 means success.
if ($returncode !== 0) {
    echo "Error, unzipping file '{$datafilename}' to '{$dataroot}'. Exiting.\n";
    exit;
}

// recreate config.php
echo "Recreating config.php with sensible default settings\n";
$versioninfo = get_site_version();
$version = isset($versioninfo->totara->version) ?
    $versioninfo->totara->version : $versioninfo->moodle->version;
$configtemplate = get_best_config($version);
$dbsettings = get_database_settings($dbtype, $dbname, $version);
$settings = merge_objects($settings, $dbsettings);
$settings->dirroot = $dirroot;
$config = substitute_template_config($configtemplate, $settings);
file_put_contents($configfile, $config);

// Update password hashes
// We need this because the CLI install may have created them with a salt
echo "Update password hashes to remove any salt\n";
$db = mydb::connect($dbtype, $settings->dbhost, $settings->dbuser, $settings->dbpass, $dbname);
$db->query("UPDATE {$settings->prefix}user SET password=md5('{$settings->adminpass}') WHERE username='admin'");
$db->query("UPDATE {$settings->prefix}user SET password=md5('guest') WHERE username='guest'");

// Set admin email/city/country
echo "Set required profile fields for admin user\n";
$db->query("
    UPDATE {$settings->prefix}user
    SET city='{$settings->defaultcity}',
    country='{$settings->defaultcountry}',
    email='{$settings->adminemail}'
    WHERE username='admin'");

echo "Starting CLI upgrade in '{$dirroot}'\n";
cli_upgrade($dirroot);

echo "Running catalog index task if required\n";
cli_run_catalog_task($dirroot);
